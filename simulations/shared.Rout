
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Clear environment and free unused memory
> rm(list = ls())
> gc()
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 275901 14.8     788288  42.1   350000  18.7
Vcells 463094  3.6   17272053 131.8 17248164 131.6
> 
> # SOURCES
> source("../mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
> source("../mcmc_functions/priors.R")
> source("../mcmc_functions/jacobians.R")
> source("../mcmc_functions/likelihood.R")
> source("../mcmc_functions/posterior.R")
> source("../other_functions/parallel_functions.R") # Parallel wrapper functions
> source("../other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(spBayes) # For spatial GPR
> library(spNNGP) # For NNGP
Loading required package: coda

Attaching package: ‘coda’

The following object is masked _by_ ‘.GlobalEnv’:

    mcmc

Loading required package: Formula
Loading required package: RANN

Attaching package: ‘spNNGP’

The following object is masked from ‘package:spBayes’:

    spDiag

> library(mvtnorm)
> library(fields)
Loading required package: spam
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:mvtnorm’:

    rmvnorm, rmvt

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: viridis
Loading required package: viridisLite

Try help(fields) to get started.
> 
> # Read in
> load("data/train.RData")
> #load("data/test.RData")
> 
> # Clusters and seed
> nCores <- 4
> mySeed <- 856021
> p <- ncol(X[[1]])
> n <- nrow(X[[1]])
> K <- nCores
> 
> nIter <- 1000
> checkEvery <- 5
> nComm <- nIter / checkEvery
> alpha <- 0
> 
> cov.model <- "exponential"
> starting <- rep(list(list("phi"=4, "sigma.sq"=1, "tau.sq"=0.25)), nCores)
> tuning <- list("phi"=0.1, "sigma.sq"=0.05, "tau.sq"=0.01)
> priors <- list("beta.Norm"=list(rep(0,p), diag(n/K,p)),
+                "phi.Unif"=c(1, 10), 
+                "sigma.sq.IG"=c(1, 1),
+                "tau.sq.IG"=c(1, 1))
> 
> #basic <- spLM(Y[[i]] ~ X[[i]], coords = coords, starting = starting,
> #              tuning = tuning, priors = priors, cov.model = cov.model, n.samples = nIter)
> #apply(basic$p.theta.samples, 2, mean)
> 
> samples <- rep(list(matrix(0, nrow = nIter, ncol = 3)), nCores)
> for (i in 1:nComm) {
+   cl <- makeCluster(nCores)
+   registerDoParallel(cl)
+   strt <- Sys.time()
+   set.seed(mySeed)
+   obj <- foreach(i = 1:nCores, .packages = c("mvtnorm", "spBayes")) %dopar% spLM(Y[[i]] ~ X[[i]] - 1, 
+                                                                                  coords = coords[[i]], 
+                                                                                  starting = starting[[i]],
+                                                                                  tuning = tuning, 
+                                                                                  priors = priors, 
+                                                                                  cov.model = cov.model, 
+                                                                                  n.samples = checkEvery)
+   final.time <- Sys.time() - strt 
+   stopCluster(cl)
+   
+   for (j in 1:nCores) {
+     samples[[j]][(checkEvery * (i-1) + 1):(checkEvery * i),] <- as.matrix(obj[[j]]$p.theta.samples)
+   }
+ 
+   param_ests <- sapply(1:nCores, \(i) apply(obj[[i]]$p.theta.samples, 2, mean))
+   starting <- lapply(1:nCores, function(i) {
+     list("phi" = alpha * param_ests["phi", i] + (1 - alpha) * mean(param_ests["phi", ]), 
+          "sigma.sq" = alpha * param_ests["sigma.sq", i] + (1 - alpha) * mean(param_ests["sigma.sq", ]),  
+          "tau.sq" = alpha * param_ests["tau.sq", i] + (1 - alpha) * mean(param_ests["tau.sq", ]))
+     })
+ }
> 
> 
> 
> sapply(1:nCores, \(i) apply(samples[[i]], 2, mean))[2,]
[1] 0.2762339 0.2807149 0.2969643 0.3006592
> sapply(starting, \(x) x$tau.sq)
   tau.sq    tau.sq    tau.sq    tau.sq 
0.3122425 0.3122425 0.3122425 0.3122425 
> 
> #rm(list = ls())
> #if (file.exists(".RData")) {
> #  file.remove(".RData")
> #}
> gc()
           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells  2129618 113.8    3992820 213.3  3992820 213.3
Vcells 19638420 149.9   30715139 234.4 22964455 175.3
> 
> proc.time()
   user  system elapsed 
  9.108   6.605 519.748 
